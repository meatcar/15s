{
  "name": "express3-handlebars",
  "description": "A Handlebars view engine for Express which doesn't suck.",
  "version": "0.2.0",
  "homepage": "https://github.com/ericf/express3-handlebars",
  "keywords": [
    "express",
    "express3",
    "handlebars",
    "view",
    "layout",
    "partials"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/ericf/express3-handlebars.git"
  },
  "author": {
    "name": "Eric Ferraiuolo",
    "email": "eferraiuolo@gmail.com",
    "url": "http://ericf.me/"
  },
  "engines": {
    "node": ">=0.8"
  },
  "dependencies": {
    "async": "~0.1",
    "glob": "3.x",
    "handlebars": "1.x"
  },
  "main": "index.js",
  "directories": {
    "lib": "./lib"
  },
  "readme": "Express3 Handlebars\n===================\n\nA [Handlebars][] view engine for [Express][] which doesn't suck.\n\n[Express]: https://github.com/visionmedia/express\n[Handlebars]: https://github.com/wycats/handlebars.js\n\n\nGoals & Design\n--------------\n\nI created this project out of frustration with the existing Handlebars view\nengines for Express. As of version 3.x, Express got out of the business of being\na generic view engine — this was a great decision — leaving developers to\nimplement the concepts of layouts, partials, and doing file I/O for their\ntemplate engines of choice.\n\n### Goals and Features\n\nAfter building a half-dozen Express apps, I developed requirements and opinions\nabout what a Handlebars view engine should provide and how it should be\nimplemented. The following is that list:\n\n* Add back the concept of \"layout\", which was removed in Express 3.x.\n\n* Add back the concept of \"partials\" via Handlebars' partials mechanism.\n\n* Support a directory of partials; e.g., `{{> foo/bar}}` which exists on the\n  file system at `views/partials/foo/bar.handlebars` by default.\n\n* Smart file system I/O and template caching. When in development, templates are\n  always loaded from disk. In production, raw files and compiled templates are\n  cached, including partials.\n\n* All async and non-blocking. File system I/O is slow and servers should not be\n  blocked from handling requests while reading from disk. I/O queuing is used to\n  avoid doing unnecessary work.\n\n* Ability to expose precompiled templates and partials to the client, enabling\n  template sharing and reuse.\n\n* Ability to use a different Handlebars module/implementation other than the\n  Handlebars npm module.\n\n### Module Design\n\nThis module was designed to work great for both the simple and complex use\ncases. I _intentionally_ made sure the full implementation is exposed and is\neasily overrideable.\n\nThe module exports a function which can be invoked with no arguments or with a\n`config` object and it will return a function (closed over sane defaults) which\ncan be registered with an Express app. It's an engine factory function.\n\nThis exported engine factory has two properties which expose the underlying\nimplementation:\n\n* `ExpressHandlebars()`: The constructor function which holds the internal\n  implementation on its `prototype`. This produces instance objects which store\n  their configuration, `compiled` and `precompiled` templates, and expose an\n  `engine()` function which can be registered with an Express app.\n\n* `create()`: A convenience factory function for creating `ExpressHandlebars`\n  instances.\n\nAn instance-based approach is used so that multiple `ExpressHandlebars`\ninstances can be created with their own configuration, templates, partials, and\nhelpers.\n\n\nInstallation\n------------\n\nInstall using npm:\n\n```shell\n$ npm install express3-handlebars\n```\n\n\nUsage\n-----\n\nThis module uses sane defaults that leverage the \"Express-way\" of structuring an\napp's views. This makes it trivial to use this module in basic apps:\n\n#### Directory Structure:\n\n```\n.\n├── app.js\n└── views\n    ├── home.handlebars\n    └── layouts\n        └── main.handlebars\n\n2 directories, 3 files\n```\n\n#### app.js:\n\nCreates a super simple Express app which shows the basic way to register a\nHandlebars view engine using this module.\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express();\n\napp.engine('handlebars', exphbs({defaultLayout: 'main'}));\napp.set('view engine', 'handlebars');\n\napp.get('/', function (req, res, next) {\n    res.render('home');\n});\n\napp.listen(3000);\n```\n\n#### views/layouts/main.handlebars:\n\nThe main layout is the HTML page wrapper which can be reused for the different\nviews of the app. `{{{body}}}` is used as a placeholder for where the main\ncontent should be rendered.\n\n```html\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Example App</title>\n</head>\n<body>\n\n    {{{body}}}\n\n</body>\n</html>\n```\n\n#### views/home.handlebars:\n\nThe content for the app's home view which will be rendered into the layout's\n`{{{body}}}`.\n\n```html\n<h1>Example App: Home</h1>\n```\n\n### Using Instances\n\nAnother way to use this module is to create an instance(s) of\n`ExpressHandlebars`, allowing access to the full API:\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express(),\n    hbs = exphbs.create({ /* config */ });\n\n// Register `hbs.engine` with the Express app.\napp.engine('handlebars', hbs.engine);\napp.set('view engine', 'handlebars');\n\n// ...still have a reference to `hbs`, which methods like `getPartials()` can be\n// called on.\n```\n\n### Template Caching\n\nThis module uses a smart template caching strategy. In development, templates\nwill always be loaded from disk, i.e., no caching. In production, raw files and\ncompiled Handlebars templates are aggressively cached.\n\nThe easiest way to control template/view caching is through Express'\n[view cache setting][]:\n\n```javascript\napp.enable('view cache');\n```\n\nExpress enables this setting by default when in production mode, i.e.,\n`process.env.NODE_ENV === \"production\"`.\n\n**Note:** All of the public API methods accept `options.cache`, which gives\ncontrol over caching when calling these methods directly.\n\n### Layouts\n\nA layout is simply a Handlebars template with a `{{{body}}}` placeholder.\nUsually it will be an HTML page wrapper in which views will be rendered.\n\nThis module adds back the concept of \"layout\", which was removed in Express 3.x.\nThis view engine can be configured with a path to the layouts directory, by\ndefault it's set to `\"views/layouts/\"`.\n\nThere are two ways to set a default layout: configuring the view engine's\n`defaultLayout` property, or setting [Express locals][] `app.locals.layout`.\n\nThe layout in which a view should be rendered can be overridden per-request by\nassigning a different value to the `layout` request local. The following will\nrender the \"home\" view with no layout:\n\n```javascript\napp.get('/', function (req, res, next) {\n    res.render('home', {layout: false});\n});\n```\n\n[view cache setting]: http://expressjs.com/api.html#app-settings\n[Express locals]: http://expressjs.com/api.html#app.locals\n\n\nAPI\n---\n\n### Configuration and Defaults\n\nThere are two main ways to use this module: via its engine factory function, or\ncreating `ExpressHandlebars` instances; both use the same configuration\nproperties and defaults.\n\n```javascript\nvar exphbs = require('express3-handlebars');\n\n// Using the engine factory:\nexphbs({ /* config */ });\n\n// Create an instance:\nexphbs.create({ /* config */ });\n```\n\nThe following is the list of configuration properties and their default values\n(if any):\n\n#### `defaultLayout`\nThe string name or path of a template in the `layoutsDir` to use as the default\nlayout. This is overridden by a `layout` specified in the app or response\n`locals`. **Note:** A falsy value will render without a layout; e.g.,\n`res.render('home', {layout: false});`.\n\n#### `extname=\".handlebars\"`\nThe string name of the file extension used by the templates.\n\n#### `handlebars=require('handlebars')`\nThe Handlebars module/implementation. This allows for the `ExpressHandlebars`\ninstance to use a different Handlebars module/implementation than that provided\nby the Handlebars npm module.\n\n#### `helpers`\nAn object which holds the helper functions used when rendering templates. This\ndefaults to `handlebars.helpers`, and will merge any helpers specified during\nconstruction.\n\n#### `layoutsDir=\"views/layouts/\"`\nThe string path to the directory where the layout templates reside.\n\n#### `partialsDir=\"views/partials/\"`\nThe string path to the directory where the partials templates reside.\n\n### Properties\n\nThe public API properties are provided via `ExpressHandlebars` instances. In\nadditional to the properties listed in the **Configuration and Defaults**\nsection, the following are additional public properties:\n\n#### `compiled`\nAn object cache which holds compiled Handlebars template functions in the\nformat: `{\"path/to/template\": [Function]}`.\n\n#### `engine`\nA function reference to the `renderView()` method which is bound to `this`\n`ExpressHandlebars` instance. This bound function should be used when\nregistering this view engine with an Express app.\n\n#### `precompiled`\nAn object cache which holds precompiled Handlebars template strings in the\nformat: `{\"path/to/template\": [String]}`.\n\n### Methods\n\nThe following is the list of public API methods provided via `ExpressHandlebars`\ninstances:\n\n#### `getPartials(options|callback, [callback])`\n\nRetreives the partials in the `partialsDir` and passes an object mapping the\npartials in the form `{name: partial}` to the `callback`.\n\nBy default each partial will be a compiled Handlebars template function. Use\n`options.precompiled` to receive the partials as precompiled templates — this is\nuseful for sharing templates with client code.\n\n**Parameters:**\n\n* `[options]`: Optional object containing any of the following properties:\n\n  * `[cache]`: Whether cached templates can be used if they have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n  * `[precompiled=false]`: Whether precompiled templates should be provided,\n    instead of compiled Handlebars template functions.\n\n* `callback`: Function to call once the partials are retrieved.\n\nThe name of each partial corresponds to its location in `partialsDir`. For\nexample, consider the following directory structure:\n\n```\nviews\n└── partials\n    ├── foo\n    │   └── bar.handlebars\n    └── title.handlebars\n\n2 directories, 2 files\n```\n\n`getPartials()` would produce the following result:\n\n```javascript\nvar hbs = require('express3-handlebars').create();\n\nhbs.getPartials(function (err, partials) {\n    console.log(partials);\n    // => { 'foo.bar': [Function],\n    // =>    title: [Function] }\n});\n```\n\n**Note:** The partial name `\"foo.bar\"` would ideally be `\"foo/bar\"`, but this is\nbeing prevented by a [Handlebars bug][]. Once this bug is fixed, a future\nversion will use a \"/\" separator. Templates requiring the partial still use:\n`{{> foo/bar}}`.\n\n#### `getTemplate(filePath, options|callback, [callback])`\n\nRetreives the template at the specified `filePath` and passes a compiled\nHandlebars template function to the `callback`.\n\nUse `options.precompiled` to receive a precompiled Handlebars template.\n\n**Parameters:**\n\n* `filePath`: String path to the Handlebars template file.\n\n* `[options]`: Optional object containing any of the following properties:\n\n  * `[cache]`: Whether a cached template can be used if it have already been\n    requested. This is recommended for production to avoid necessary file I/O.\n\n  * `[precompiled=false]`: Whether a precompiled template should be provided,\n    instead of a compiled Handlebars template function.\n\n* `callback`: Function to call once the template is retrieved.\n\n#### `render(filePath, options|callback, [callback])`\n\nRenders the template at the specified `filePath` using this instance's `helpers`\nand partials, and passes the resulting string to the `callback`.\n\nThe `options` will be used both as the context in which the Handlebars template\nis rendered, and to signal this view engine on how it should behave, e.g.,\n`options.cache = false` will load _always_ load the templates from disk.\n\n**Parameters:**\n\n* `filePath`: String path to the Handlebars template file.\n\n* `[options]`: Optional object which will serve as the context in which the\n  Handlebars template is rendered. It may also contain any of the following\n  properties which affect this view engine's behavior:\n\n  * `[cache]`: Whether a cached template can be used if it have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n* `callback`: Function to call once the template is retrieved.\n\n#### `renderView(viewPath, options|callback, [callback])`\n\nRenders the template at the specified `viewPath` as the `{{{body}}}` within the\nlayout specified by the `defaultLayout` or `options.layout`. Rendering will use\nthis instance's `helpers` and partials, and passes the resulting string to the\n`callback`.\n\nThis method is called by Express and is the main entry point into this Express\nview engine implementation. It adds the concept of a \"layout\" and delegates\nrendering to the `render()` method.\n\nThe `options` will be used both as the context in which the Handlebars templates\nare rendered, and to signal this view engine on how it should behave, e.g.,\n`options.cache=false` will load _always_ load the templates from disk.\n\n**Parameters:**\n\n* `viewPath`: String path to the Handlebars template file which should serve as\n  the `{{{body}}}` when using a layout.\n\n* `[options]`: Optional object which will serve as the context in which the\n  Handlebars templates are rendered. It may also contain any of the following\n  properties which affect this view engine's behavior:\n\n  * `[cache]`: Whether cached templates can be used if they have already been\n    requested. This is recommended for production to avoid unnecessary file I/O.\n\n  * `[layout]`: Optional string path to the Handlebars template file to be used\n    as the \"layout\". This overrides any `defaultLayout` value. Passing a falsy\n    value will render with no layout (even if a `defaultLayout` is defined).\n\n* `callback`: Function to call once the template is retrieved.\n\n[Handlebars bug]: https://github.com/wycats/handlebars.js/pull/389\n\n\nAdvanced Usage Example\n----------------------\n\nAs noted in the **Module Design** section, this module's implementation is\ninstance-based, and more advanced usages can take advantage of this. The\nfollowing example demonstrates how to use an `ExpressHandlebars` instance to\nshare templates with the client:\n\n#### Directory Structure:\n\n```\n.\n├── app.js\n└── views\n    ├── home.handlebars\n    └── layouts\n    │   └── main.handlebars\n    └── partials\n        ├── foo\n        │   └── bar.handlebars\n        └── title.handlebars\n\n2 directories, 3 files\n```\n\n#### app.js:\n\nThe Express app can be implemented to expose its partials through the use of\nroute middleware:\n\n```javascript\nvar express = require('express'),\n    exphbs  = require('express3-handlebars'),\n\n    app = express(),\n    hbs;\n\n// Create `ExpressHandlebars` instance with a default layout.\nhbs = exphbs.create({\n    defaultLayout: 'main'\n});\n\n// Register `hbs` as our view engine using its bound `engine()` function.\napp.engine('handlebars', hbs.engine);\napp.set('view engine', 'handlebars');\n\n// Middleware to expose the app's partials when rendering the view.\nfunction exposeTemplates(req, res, next) {\n    // Uses the `ExpressHandlebars` instance to get the precompiled partials.\n    hbs.getPartials({\n        cache      : app.enabled('view cache'),\n        precompiled: true\n    }, function (err, partials) {\n        if (err) { return next(err); }\n\n        var templates = [];\n\n        Object.keys(partials).forEach(function (name) {\n            templates.push({\n                name    : name,\n                template: partials[name]\n            });\n        });\n\n        // Exposes the partials during view rendering.\n        if (templates.length) {\n            res.locals.templates = templates;\n        }\n\n        next();\n    });\n}\n\napp.get('/', exposeTemplates, function (req, res, next) {\n    res.render('home');\n});\n\napp.listen(3000);\n```\n\n#### views/layouts/main.handlebars:\n\nThe layout can then access these precompiled partials via the `templates` local,\nand render them like this:\n\n```handlebars\n<!doctype html>\n<html>\n<head>\n    <meta charset=\"utf-8\" />\n    <title>Example App</title>\n</head>\n<body>\n\n    {{{body}}}\n\n  {{#if templates}}\n    <script src=\"/libs/handlebars.runtime.js\"></script>\n    <script>\n        (function () {\n            var template  = Handlebars.template,\n                templates = Handlebars.templates = Handlebars.templates || {};\n\n          {{#templates}}\n            templates['{{{name}}}'] = template({{{template}}});\n          {{/templates}}\n        }());\n    </script>\n  {{/if}}\n\n</body>\n</html>\n```\n\n\nLicense\n-------\n\nCopyright (c) 2013 by Eric Ferraiuolo (eferraiuolo@gmail.com). All rights reserved.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "readmeFilename": "README.md",
  "_id": "express3-handlebars@0.2.0",
  "dist": {
    "shasum": "3c478b9e8350ecc7718e1e5762b30c3b32defe55"
  },
  "_from": "express3-handlebars@>=0",
  "_resolved": "https://registry.npmjs.org/express3-handlebars/-/express3-handlebars-0.2.0.tgz"
}
